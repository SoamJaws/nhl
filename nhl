#!/usr/bin/env python

import argparse
import operator

from model import Model
from view import View

def nonnegative(x):
    x = int(x)
    if x < 0:
        raise argparse.ArgumentTypeError("Negative integer")
    return x

class NHL:

    def __init__(self, model, view):
        self.model = model
        self.view = view

    def _parse_args(self):
        parser = argparse.ArgumentParser(
        description='Command line tool for managing nhl statistics',
        usage='''nhl <command> [<args>]

The most commonly used nhl commands are:
   add     Add a game entry
   suggest Get a suggestion of who you should challenge
   stats   Print the current standings
''')

        subparsers = parser.add_subparsers(help='Subcommand to run', dest='command')

        add_parser = subparsers.add_parser('add',
            description='Add a game entry',
            usage='''nhl add <home> <away> <home_score> <away_score> [-o|--over-time]''')
        add_parser.add_argument('home', type=str.upper, help='home player')
        add_parser.add_argument('away', type=str.upper, help='away player')
        add_parser.add_argument('home_score', type=nonnegative, help='score of the home player')
        add_parser.add_argument('away_score', type=nonnegative, help='score of the away player')
        add_parser.add_argument('-o', '--overtime', action='store_true', help='specify if the game was finished in overtime')

        suggest_parser = subparsers.add_parser('suggest')
        suggest_parser.add_argument('player', help='your player name')
        suggest_parser.add_argument('-e', '--exclude', nargs='*', default=[], help='a list of players to exclude from the match suggestions')

        stats_parser = subparsers.add_parser('stats')

        html_parser = subparsers.add_parser('html')

        return parser.parse_args()

    def run_command(self):
        args = self._parse_args()
        getattr(self, args.command)(args)

    def add(self, args):
        model.add(args.home, args.away, args.home_score, args.away_score, args.overtime)

        overtime_print = ", OT" if args.overtime else ""
        print "Successfully added game \"%s @ %s: %d-%d%s\"" % ( args.away
                                                               , args.home
                                                               , args.away_score
                                                               , args.home_score
                                                               , overtime_print
                                                               )

    def _suggest_matches(self, player, exclude):
        for player_name in exclude:
            if player_name in model.player_dict:
                del model.player_dict[player_name]

            for pn, p in model.player_dict.iteritems():
                if player_name in p.match_count:
                    del p.match_count[player_name]

        least_played_player = min(player.match_counts.iteritems(), key=operator.itemgetter(1))[0]
        player_least_played_games = min(model.player_dict.values(), key=operator.attrgetter('gp')).name
        leader = max(model.player_dict.values()).name

        return least_played_player, player_least_played_games, leader

    def suggest(self, args):
        player = model.player_dict[args.player]
        least_played_player, player_least_played_games, leader = self._suggest_matches(player, args.exclude)


        print "Least played player            - %s, %s" % (least_played_player, "away" if model.player_dict[least_played_player] > player else "home")
        print "Player with least played games - %s, %s" % (player_least_played_games, "away" if model.player_dict[player_least_played_games] > player else "home")
        print "Season leader                  - %s, away" % leader

    def stats(self, args):
        self.view.print_stats()

    def _print_stats_html_table(self):
        print "<table>"
        print "<caption>%s</caption>" % model.season.replace("_", " ").upper()
        print "<tr class=\"header\">"
        print "<th>#</th>"
        print "<th>Player</th>"
        print "<th style=\"cursor:pointer;\" title=\"Win loss ratio\">WLR</th>"
        print "<th style=\"cursor:pointer;\" title=\"Games played\">GP</th>"
        print "<th style=\"cursor:pointer;\" title=\"Wins\">W</th>"
        print "<th style=\"cursor:pointer;\" title=\"Losses\">L</th>"
        print "<th style=\"cursor:pointer;\" title=\"Overtime wins\">OT</th>"
        print "<th style=\"cursor:pointer;\" title=\"Goals for\">GF</th>"
        print "<th style=\"cursor:pointer;\" title=\"Goals against\">GA</th>"
        print "<th style=\"cursor:pointer;\" title=\"Goal difference\">DIFF</th>"
        print "</tr>"

        position = 0
        for player in model.player_list:
            position += 1
            print "<tr class=\"player\">"
            print "<th>%d</th>"   % position
            print "<th>%s</th>"   % player.name
            print "<th>%.2f</th>" % player.wlr
            print "<th>%d</th>"   % player.gp
            print "<th>%d</th>"   % player.w
            print "<th>%d</th>"   % player.l
            print "<th>%d</th>"   % player.ot
            print "<th>%d</th>"   % player.gf
            print "<th>%d</th>"   % player.ga
            print "<th>%d</th>"   % player.diff
            print "</tr>"
        print "</table>"

    def _print_match_count_html_table(self):
        print "<table>"
        print "<caption>GAMES PLAYED</caption>"
        print "<tr class=\"header\">"
        print "<th>Player</th>"
        print "<th>Player</th>"
        print "<th>Games played</th>"
        print "</tr>"

        printed = {}
        for player in model.player_list:
            printed[player.name] = []
            for away_player, count in player.match_counts.iteritems():
                if away_player in printed and not player.name in printed[away_player]:
                    print "<tr class=\"player\">"
                    print "<th>%s</th>" % player.name
                    print "<th>%s</th>" % away_player
                    print "<th>%d</th>" % count
                    print "</tr>"
                    printed[player.name].append(away_player)
        print "</table>"

    def _print_suggestions_html_table(self):
        print "<table>"
        print "<caption>MATCH SUGGESTIONS</caption>"
        print "<tr class=\"header\">"
        print "<th>Player</th>"
        print "<th style=\"cursor:pointer;\" title=\"Least played player\">LPP</th>"
        print "<th style=\"cursor:pointer;\" title=\"Least played games\">LPG</th>"
        print "<th>Leader</th>"
        print "</tr>"

        printed = {}
        for player_name, player in model.player_dict.iteritems():
            least_played_player, player_least_played_games, leader = self._suggest_matches(player, [])
            print "<tr class=\"player\">"
            print "<th>%s</th>" % player.name
            print "<th>%s</th>" % least_played_player
            print "<th>%s</th>" % player_least_played_games
            print "<th>%s</th>" % leader
            print "</tr>"
        print "</table>"

    def html(self, args):
        print "<!DOCTYPE html>"
        print "<html>"
        print "<head><title>NHL STEGEN 3.0</title><link rel=\"stylesheet\" href=\"styles.css\"></head>"
        print "<body>"
        self._print_stats_html_table()
        print "<br>"
        self._print_match_count_html_table()
        print "<br>"
        self._print_suggestions_html_table()
        print "</body>"
        print "</html>"


if __name__ == '__main__':
    model = Model()
    model.load_players()
    view = View(model)
    nhl = NHL(model, view)
    nhl.run_command()
    model.save()
