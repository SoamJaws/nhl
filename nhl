#!/usr/bin/env python

import argparse

from model import Model
from view import ConsoleView, HtmlView
from control import Control

def nonnegative(x):
    x = int(x)
    if x < 0:
        raise argparse.ArgumentTypeError("Negative integer")
    return x

def parse_args():
    parser = argparse.ArgumentParser(
    description='Command line tool for managing nhl statistics',
    usage='''nhl <command> [<args>]

The most commonly used nhl commands are:
   add     Add a game entry
   suggest Get a suggestion of who you should challenge
   stats   Print the current standings
''')

    subparsers = parser.add_subparsers(help='Subcommand to run', dest='command')

    add_parser = subparsers.add_parser('add',
        description='Add a game entry',
        usage='''nhl add <home> <away> <home_score> <away_score> [-o|--over-time]''')
    add_parser.add_argument('home', type=str.upper, help='home player')
    add_parser.add_argument('away', type=str.upper, help='away player')
    add_parser.add_argument('home_score', type=nonnegative, help='score of the home player')
    add_parser.add_argument('away_score', type=nonnegative, help='score of the away player')
    add_parser.add_argument('-o', '--overtime', action='store_true', help='specify if the game was finished in overtime')

    suggest_parser = subparsers.add_parser('suggest')
    suggest_parser.add_argument('player', help='your player name')
    suggest_parser.add_argument('-e', '--exclude', nargs='*', default=[], help='a list of players to exclude from the match suggestions')

    stats_parser = subparsers.add_parser('stats')

    html_parser = subparsers.add_parser('html')

    return parser.parse_args()

if __name__ == '__main__':
    args = parse_args()
    model = Model()
    console_view = ConsoleView(model)
    html_view = HtmlView(model)
    control = Control(model, console_view, html_view)
    control.run_command(args.command, args)
    model.save()
